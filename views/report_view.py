"""
Vue pour l'affichage des rapports (compact√©e < 100 lignes).
"""


class ReportView:
    def display_report_menu(self):
        print("\nüìä RAPPORTS")
        print("-" * 30)
        print("1. üìã Tous les joueurs (ordre alphab√©tique)")
        print("2. üèÜ Tous les joueurs (par classement)")
        print("3. üéØ Joueurs d'un tournoi (ordre alphab√©tique)")
        print("4. üéØ Joueurs d'un tournoi (par classement)")
        print("5. üèÜ Liste de tous les tournois")
        print("6. üîÑ Rondes d'un tournoi")
        print("7. üéÆ Matchs d'un tournoi")
        print("0. ‚¨ÖÔ∏è  Retour au menu principal")
        print("-" * 30)

    def display_report(self, report_content, title="RAPPORT"):
        print(f"\nüìä {title}")
        print("=" * 60)
        print(report_content)
        print("=" * 60)

    def display_tournament_selection_for_report(self, tournaments, report_type):
        if not tournaments:
            print("Aucun tournoi disponible pour ce rapport.")
            return None
        print(f"\nüéØ S√âLECTION DU TOURNOI POUR: {report_type}")
        print("-" * 50)
        for i, tournament in enumerate(tournaments, 1):
            status = "Termin√©" if tournament.completed else "En cours"
            print(f"{i}. {tournament.name} - {tournament.location} ({status})")
        while True:
            try:
                choice = int(input("\nNum√©ro du tournoi (0 pour annuler): ").strip())
                if choice == 0:
                    return None
                if 1 <= choice <= len(tournaments):
                    return tournaments[choice - 1]
                print(f"‚ùå Veuillez entrer un nombre entre 0 et {len(tournaments)}")
            except ValueError:
                print("‚ùå Veuillez entrer un nombre valide")

    def display_no_tournaments_message(self):
        print("\n‚ùå Aucun tournoi enregistr√©.")
        print("Cr√©ez d'abord un tournoi pour g√©n√©rer ce rapport.")

    def display_no_players_message(self):
        print("\n‚ùå Aucun joueur enregistr√©.")
        print("Ajoutez d'abord des joueurs pour g√©n√©rer ce rapport.")

    def ask_save_report(self):
        return input(
            "\nüíæ Voulez-vous sauvegarder ce rapport dans un fichier? (o/n): "
        ).strip().lower() in ['o', 'oui', 'y', 'yes']

    def get_report_filename(self, default_name="rapport.txt"):
        filename = input(f"\nüìÅ Nom du fichier (d√©faut: {default_name}): ").strip()
        return filename if filename else default_name

    def display_report_saved(self, filename):
        print(f"\n‚úÖ Rapport sauvegard√© dans: {filename}")

    def display_error_saving_report(self, filename):
        print(f"\n‚ùå Erreur lors de la sauvegarde du rapport: {filename}")
